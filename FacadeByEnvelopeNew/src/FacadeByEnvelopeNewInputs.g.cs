// This code was generated by Hypar.
// Edits to this code will be overwritten the next time you run 'hypar init'.
// DO NOT EDIT THIS FILE.

using Elements;
using Elements.GeoJSON;
using Elements.Geometry;
using Hypar.Functions;
using Hypar.Functions.Execution;
using Hypar.Functions.Execution.AWS;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.Collections.Generic;

namespace FacadeByEnvelopeNew
{
    public class FacadeByEnvelopeNewInputs: S3Args
    {
		/// <summary>
		/// The panel width
		/// </summary>
		[JsonProperty("Panel Width")]
		public double PanelWidth {get;}

		/// <summary>
		/// The inset of the glass panel from the left and right of the outer frame.
		/// </summary>
		[JsonProperty("Glass Left-Right Inset")]
		public double GlassLeftRightInset {get;}

		/// <summary>
		/// The inset of the glass panel from the top and bottom of the outer frame.
		/// </summary>
		[JsonProperty("Glass Top-Bottom Inset")]
		public double GlassTopBottomInset {get;}


        
        /// <summary>
        /// Construct a FacadeByEnvelopeNewInputs with default inputs.
        /// This should be used for testing only.
        /// </summary>
        public FacadeByEnvelopeNewInputs() : base()
        {
			this.PanelWidth = 4;
			this.GlassLeftRightInset = 1;
			this.GlassTopBottomInset = 1;

        }


        /// <summary>
        /// Construct a FacadeByEnvelopeNewInputs specifying all inputs.
        /// </summary>
        /// <returns></returns>
        [JsonConstructor]
        public FacadeByEnvelopeNewInputs(double panelwidth, double glassleftrightinset, double glasstopbottominset, string bucketName, string uploadsBucket, Dictionary<string, string> modelInputKeys, string gltfKey, string elementsKey, string ifcKey): base(bucketName, uploadsBucket, modelInputKeys, gltfKey, elementsKey, ifcKey)
        {
			this.PanelWidth = panelwidth;
			this.GlassLeftRightInset = glassleftrightinset;
			this.GlassTopBottomInset = glasstopbottominset;

		}

		public override string ToString()
		{
			var json = JsonConvert.SerializeObject(this);
			return json;
		}
	}
}