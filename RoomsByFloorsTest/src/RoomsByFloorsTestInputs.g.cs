// This code was generated by Hypar.
// Edits to this code will be overwritten the next time you run 'hypar init'.
// DO NOT EDIT THIS FILE.

using Elements;
using Elements.GeoJSON;
using Elements.Geometry;
using Hypar.Functions;
using Hypar.Functions.Execution;
using Hypar.Functions.Execution.AWS;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.Collections.Generic;

namespace RoomsByFloorsTest
{
    public class RoomsByFloorsTestInputs: S3Args
    {
		/// <summary>
		/// Number of rooms on the x-axis of the ground floor.
		/// </summary>
		[JsonProperty("Ground Floor Room Length Divisions")]
		public double GroundFloorRoomLengthDivisions {get;}

		/// <summary>
		/// Number of rooms on the y-axis of the ground floor.
		/// </summary>
		[JsonProperty("Ground Floor Room Width Divisions")]
		public double GroundFloorRoomWidthDivisions {get;}

		/// <summary>
		/// Number of rooms on the x-axis of typical floors.
		/// </summary>
		[JsonProperty("Typical Floor Rooms Length Divisions")]
		public double TypicalFloorRoomsLengthDivisions {get;}

		/// <summary>
		/// Number of rooms on the y-axis of typical floors.
		/// </summary>
		[JsonProperty("Typical Floor Rooms Width Divisions")]
		public double TypicalFloorRoomsWidthDivisions {get;}

		/// <summary>
		/// Plan setback from the edge of all floors.
		/// </summary>
		[JsonProperty("Plan Setback")]
		public double PlanSetback {get;}

		/// <summary>
		/// Plan rotation for all floors.
		/// </summary>
		[JsonProperty("Plan Rotation")]
		public double PlanRotation {get;}

		/// <summary>
		/// Display rooms in 3D or 2D.
		/// </summary>
		[JsonProperty("Rooms in 3D")]
		public bool RoomsIn3D {get;}


        
        /// <summary>
        /// Construct a RoomsByFloorsTestInputs with default inputs.
        /// This should be used for testing only.
        /// </summary>
        public RoomsByFloorsTestInputs() : base()
        {
			this.GroundFloorRoomLengthDivisions = 50;
			this.GroundFloorRoomWidthDivisions = 50;
			this.TypicalFloorRoomsLengthDivisions = 50;
			this.TypicalFloorRoomsWidthDivisions = 50;
			this.PlanSetback = 2;
			this.PlanRotation = 355;
			this.RoomsIn3D = false;

        }


        /// <summary>
        /// Construct a RoomsByFloorsTestInputs specifying all inputs.
        /// </summary>
        /// <returns></returns>
        [JsonConstructor]
        public RoomsByFloorsTestInputs(double groundfloorroomlengthdivisions, double groundfloorroomwidthdivisions, double typicalfloorroomslengthdivisions, double typicalfloorroomswidthdivisions, double plansetback, double planrotation, bool roomsin3D, string bucketName, string uploadsBucket, Dictionary<string, string> modelInputKeys, string gltfKey, string elementsKey, string ifcKey): base(bucketName, uploadsBucket, modelInputKeys, gltfKey, elementsKey, ifcKey)
        {
			this.GroundFloorRoomLengthDivisions = groundfloorroomlengthdivisions;
			this.GroundFloorRoomWidthDivisions = groundfloorroomwidthdivisions;
			this.TypicalFloorRoomsLengthDivisions = typicalfloorroomslengthdivisions;
			this.TypicalFloorRoomsWidthDivisions = typicalfloorroomswidthdivisions;
			this.PlanSetback = plansetback;
			this.PlanRotation = planrotation;
			this.RoomsIn3D = roomsin3D;

		}

		public override string ToString()
		{
			var json = JsonConvert.SerializeObject(this);
			return json;
		}
	}
}